// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Asch-

//@version=5

// ORB

inputMax = input(15, title='ORB total time (minutes)')
sess = input.session('0930-0945', title='Session Time')
t = time(timeframe.period, sess + ':1234567')
hide = timeframe.isintraday and timeframe.multiplier <= inputMax

is_newbar(res) =>
    ta.change(time(res)) != 0
in_session = not na(t)
is_first = in_session and not in_session[1]

orb_high = float(na)
orb_low = float(na)

if is_first
    orb_high := high
    orb_low := low
    orb_low
else
    orb_high := orb_high[1]
    orb_low := orb_low[1]
    orb_low
if high > orb_high and in_session
    orb_high := high
    orb_high
if low < orb_low and in_session
    orb_low := low
    orb_low

plot(hide ? orb_high : na, style=plot.style_line, color=orb_high[1] != orb_high ? na : color.rgb(66, 255, 236), title='ORB High', linewidth=2)
plot(hide ? orb_low : na, style=plot.style_line, color=orb_low[1] != orb_low ? na : color.rgb(66, 255, 236), title='ORB Low', linewidth=2)


//gap script

indicator(title='ORB & GAPS & ATR', overlay=true, max_bars_back=3003)

length = input.int(3000, minval=1, maxval=3003)
width = input.int(2, options=[1, 2, 3, 4, 5])

gap_start = high[length]
gap_end = low[length - 1]
gap_bull = false
gap_bear = false
inf_gap = 0.0
sup_gap = 0.0

if barstate.islast
    for j = 1 to length by 1
        gap_bull := false
        gap_bear := false
        inf_gap := 0.0
        sup_gap := 0.0

        if high[j] < low[j - 1]  //bull gap
            gap_start := high[j]
            gap_end := low[j - 1]
            gap_bull := true
            inf_gap := gap_start
            sup_gap := gap_end
            for i = j - 1 to 0 by 1
                sup_gap := math.min(sup_gap, low[i])
                sup_gap
            if (sup_gap - inf_gap) / (syminfo.mintick * 10) < 5  // only gap > 5 pips are considered
                gap_bull := false
                gap_bull

        if low[j] > high[j - 1]  //bear gap
            gap_start := low[j]
            gap_end := high[j - 1]
            gap_bear := true
            inf_gap := gap_end
            sup_gap := gap_start
            for i = j - 1 to 0 by 1
                inf_gap := math.max(inf_gap, high[i])
                inf_gap
            if (sup_gap - inf_gap) / (syminfo.mintick * 10) < 5  // only gap > 5 pips are considered
                gap_bear := false
                gap_bear

        if gap_bull
            //label_bull = label.new(bar_index[j], na, 'Bull gap: ' + tostring((sup_gap - inf_gap)/(syminfo.mintick*10)) + ' pips\n' + '[' + tostring(inf_gap) + ' ; ' + tostring(sup_gap) + ']',
            //color=color.green,
            //textcolor=color.white,
            //style=label.style_labelup, yloc=yloc.belowbar)
            //label.delete(label_bull[1])

            line_bull_inf = line.new(x1=bar_index[j], y1=inf_gap, x2=bar_index, y2=inf_gap, extend=extend.right, color=color.green, style=line.style_solid, width=width)
            //line.delete(line_bull_inf[1])

            line_bull_sup = line.new(x1=bar_index[j - 1], y1=sup_gap, x2=bar_index, y2=sup_gap, extend=extend.right, color=color.green, style=line.style_solid, width=width)
            line_bull_sup
            //line.delete(line_bull_sup[1])


        if gap_bear
            //label_bear = label.new(bar_index[j], na, 'Bear gap: ' + tostring((sup_gap - inf_gap)/(syminfo.mintick*10)) + ' pips\n' + '[' + tostring(inf_gap) + ' ; ' + tostring(sup_gap) + ']',
            //color=color.red,
            //textcolor=color.white,
            //style=label.style_labeldown, yloc=yloc.abovebar)
            //label.delete(label_bear[1])

            line_bear_inf = line.new(x1=bar_index[j - 1], y1=inf_gap, x2=bar_index, y2=inf_gap, extend=extend.right, color=color.red, style=line.style_solid, width=width)
            //line.delete(line_bear_inf[1])

            line_bear_sup = line.new(x1=bar_index[j], y1=sup_gap, x2=bar_index, y2=sup_gap, extend=extend.right, color=color.red, style=line.style_solid, width=width)
            line_bear_sup
//line.delete(line_bear_sup[1])


atr_daily = request.security(syminfo.tickerid, "D", ta.atr(14))
plotchar(atr_daily, title = "ATR",char="", display=display.status_line,, color = color.red)

